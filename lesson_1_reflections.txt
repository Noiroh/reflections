How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    I saw the differences between a version that works and a version that
    doesn't, so I saw the changes and in the changes was the bug.

How could having easy access to the entire history of a file make you a better
programmer in the long term?

    I can see the changes that I do and how my code evolve. Also I can restore
    any version of a file to see the status of that file on that time.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
    
    The pros is that you store the logical point to return to or to see the
    changes. The cons is that if you don't have discipline, you will got a lot
    of work without storing all the logical parts.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because some projects, like coding, have different files interconected, so
    tracking them individually, can make a project difficult to restore to a
    previous state. In the other hand, in Google Docs, every document has sense
    by itself, so it is no need to save multiple files once.

How can you use the commands git log and git diff to view the history of files?
    
    With git log, I can see the differents commits and navigate through all the
    history. With git diff, I can see the differences between those commits and
    see the changes.

How might using version control make you more confident to make changes that
could break something?
    
    Because if I break something, I can anytime revert to a working state of the
    application and know what change break it.

Now that you have your workspace set up, what do you want to try using Git for?

    For programming my own projects and with other people.
